# Controls core quantum 'modules'
quantum-modules: {
  # Controls the random-spawn feature.
  random-spawn: {
    # Should random spawn be enabled? (If set to false, nothing random spawn-related will be loaded.)
    enabled: true

    # Config options for the spawn-on-join feature.
    spawn-on-join: {
      # Should players be given a random spawn when they join?
      enabled: true

      # The ruleset to apply to this feature. This feature only supports one ruleset.
      ruleset: basic
    }

    # Config options foro the spawn-on-first-join feature.
    spawn-on-first-join: {
      # Should players be given a random spawn when they first join?
      #
      # Note: this option functions independently from the `spawn-on-join` option.
      # For example, if you only want players to receive spawns after their first join,
      # set `spawn-on-first-join` to false and `spawn-on-join` to true.
      # Config options for the spawn-on-join feature.
      enabled: true

      # The ruleset to apply to this feature. This feature only supports one ruleset.
      ruleset: basic
    }

    # Config options for the spawn-on-respawn feature.
    spawn-on-respawn: {
      # Should players be given a random respawn point?
      enabled: true

      # Rulesets to apply to this feature.
      #
      # Note: if you want spawn-on-respawn to function in multiple worlds, add rulesets that govern said worlds.
      # The default ruleset only covers a world called `world`. You may need to add more.
      rulesets: [basic]
    }

  }

  wild: {
    # Should /wild be enabled?
    enabled: true

    # What rulesets will apply to a /wild search?
    #
    # Note: if you want /wild to function in multiple worlds, add rulesets that govern said worlds.
    # The default ruleset only covers a world called `world`. You may need to add more.
    rulesets: [basic]
  }
}

# A list of rulesets that will be accessible throughout Quantum's configuration.
# You will need to apply these rulesets in a module's configuration.
#
# A ruleset is an object that controls what Quantum considers a valid spawnpoint.
# Additionally, rulesets control where Quantum looks for spawns.
rulesets: {
  # Your ruleset. This can be named anything.
  basic: {
    # The name of the world that this ruleset applies to
    world: world

    # Controls where Quantum should put the player
    #
    # Values:
    #   highest-possible: Will spawn the player at the highest free location
    #   lowest-possible: Will spawn the player at the lowest free location
    #   40-70: Will spawn the player between y-values 40 and 70 (an example - the numbers can be anything between 0 and 255).
    #
    # Note: Applying multiple rulesets to a world will result in Quantum using the first set spawn-target.
    # If no spawn-target is found in a worlds ruleset, then Quantum will use a default value of highest-possible.
    spawn-target: highest-possible

    # This controls this ruleset's spawn search region.
    # The search-area field is an optional value.
    #
    # Note: Applying multiple rulesets to a world will result in Quantum using the first set search-area.
    # If no search-area is found in a worlds ruleset, then Quantum will use a default value of (-1000, 1000, -1000, 1000).
    search-area: {
      # The minimum X value of Quantum's radius
      min-x: -1000
      # The maximum X value of Quantum's radius
      max-x: 1000
      # The minimum Z value of Quantum's radius
      min-z: 1000
      # The maximum Z value of Quantum's radius
      max-z: 1000
    }

    # The set of rules that apply to this ruleset
    rules: [
      {
        # The rule's type. You can see a list of valid ruletypes on the Quantum wiki: <link>
        type: avoid-block
        # The rule's options. You can read more about Quantum's ruletypes and their options here: <link>
        options: {
          block-types: [LAVA, WATER]
        }
      },
      {
        type: wg-avoid-region
        options: {
          regions: [spawn, warzone]
        }
      }
    ]
  }
}